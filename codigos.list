//Encontrar el valor mas pequeÃ±o en un arreglo
rom[0] = 32'h00000800; //ADD $1, $0, $0
rom[1] = 32'h2402000B; //ADDIU $2, $0, 11
rom[2] = 32'h8C230000; //LW $3, 0($1)
rom[3] = 32'h24210001; //ADDI $1, $1, 1
rom[4] = 32'h8C240000; //LW $4, 0($1)
rom[5] = 32'h04832800; //SLT $5, $4, $3
rom[6] = 32'h10A00002; //BEQ $5, $0, 1
rom[7] = 32'h00041800; //ADD $3, $4, $0
rom[8] = 32'h10220002; //BEQ $1, $2, $1
rom[9] = 32'h08000003; //JMP 2
rom[10] = 32'hAC230000;//SW $3, 0($1)
rom [11] = 32'h0800000B;//JMP11

//Any code that demos basic functionality

function biggest(x,y){
	if ( x > y) return x
	else return y
}

rom[0] = 32'h8C210000	//LW $1, 0($1)
rom[1] = 32'h8C020000	//LW $2, 0($0)
rom[2] = 32'h04224000	//SLT $4, $1, $2
rom[3] = 32'h10800003	//BEQ $4, $0, 2
rom[4] = 32'hAC020004	//SW $2, 0($3)
rom[5] = 32'h08E00000	//JMP 7
rom[6] = 32'hAC010004	//SW $1, 0($3)
rom[7] = 32'h08E00000	//JMP 7

//Sum of absolute differences of unsigned numbers, for A[7] and B[7]
rom[0] = 32'h00002800;  //ADD $5, $0, $0
rom[1] = 32'h00000800;  //ADD $1, $0, $0
rom[2] = 32'h001F1000;  //ADD $2,$0,$31
rom[3] = 32'h8C230000;  //LW $3, 0($1)
rom[4] = 32'h8C240008;  //LW $4, 8($1)
rom[5] = 32'hC0643000;  //SUB $6, $3, $4
rom[6] = 32'hE0C70000; //ABS $7, $6
rom[7] = 32'h00A72800; //ADD $5, $7, $5
rom[8] = 32'h24210001; //ADDIU $1, $1, 1
rom[9] = 32'h10220002; //BEQ $1, $2, 1
rom[10] = 32'h08000003;//JMP 3
rom[11] = 32'hAFE50000; //SW $5, 0($15)
rom [12] = 32'h0800000C;//JMP12

